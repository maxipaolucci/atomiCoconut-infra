AWSTemplateFormatVersion: "2010-09-09"

Description: 'Infrastructure for atomiCoconut project'

Parameters:
  EBAppName:
    Description: ElasticBeanstalk application name
    Type: String
    Default: atomiCoconut
  EBEnvironmentType:
    Type: String
    Description: ElasticBeanstalk environment type
    Default: testing
    AllowedValues:
      - testing
      - production
  EBAppSourceS3BucketName:
    Type: String
    Description: Bucket with initial app-sources to deploy in the EB environment
    Default: atomicoconut
  EBAppSourceS3KeyName:
    Type: String
    Description: Key in S3 Bucket with initial app-sources to deploy in the EB environment
    Default: infrastructure/ecs-sample
  EBSnsTopicEmail:
    Type: String
    Description: Email where to receive notifications regarding ElasticBeanstalk environment
    Default: maxipaolucci@gmail.com
  MaxDbBkpKept:
    Type: String
    Description: Maximum amount of database backups to keep in S3
    Default: 30
  EBKeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    NoEcho: true
    Description: Keypair for elasticbeanstalk environment to connect to EC2 instances
    Default: atomiCoconut_keypair
  CurrencyLayerKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/currencylayer/key
    Description: Access key for currencylayer.com to access the API
  MapsApiKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/aco/maps/apikey
    Description: API key for Google Maps
  PusherSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    # NoEcho: true
    Default: /maxipaolucci/aco/test/pusher/secret
    Description: Secret value for Pusher Channels API 
  PusherKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    # NoEcho: true
    Default: /maxipaolucci/aco/test/pusher/key
    Description: Key value for Pusher Channels API 
  PusherAppId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    # NoEcho: true
    Default: /maxipaolucci/aco/test/pusher/appid
    Description: AppID value for Pusher Channels API 
  SessionKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /aco/nodesession/key
    Description: Session key for aCo Node app
  SessionSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /aco/nodesession/secret
    Description: Session secret for aCo Node app
  MailTrapPass:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/aco/mailtrap/pass
    Description: Mailtrap.io password for aCo app
  MailTrapUser:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/aco/mailtrap/user
    Description: Mailtrap.io user for aCo app
  Database:
    Type: 'AWS::SSM::Parameter::Value<String>'
    # NoEcho: true
    Default: /maxipaolucci/aco/test/atlasdb/connectionstring
    Description: Connection string for aco atlas mongodb
  SendgridApiKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/aco/sendgrid/apikey
    Description: Sendgrid API Key for atomiCoconut
  DeployHttpsCertsFromBkp:
    Type: String
    AllowedValues: 
      - true
      - false
    Default: true
    Description: Set to true to allow deployment of the latest certificates backed up in S3 for this environment
  EBEnableEC2SpotInstances:
    Type: String
    AllowedValues: 
      - true
      - false
    Default: false
    Description: Set to true to use EC2 spot intance in EB environment, or false for on demmand instances
  RepoBranch:
    Description: Repository branch name
    Type: String
    Default: testing
  EnableNodeJsLogger:
    Type: String
    AllowedValues: 
      - true
      - false
    Default: false
    Description: Set to true to allow NodeJS app to write log files.
  NodeJSLogSize:
    Description: NodeJS app log file size (for rotation)
    Type: String
    Default: 10k

Conditions: 
  IsProdEnvironment: !Equals [ !Ref EBEnvironmentType, production ]
  useSpotEC2Instances: !Equals [ !Ref EBEnableEC2SpotInstances, true ]

Resources:

  HTTPSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [!Ref EBAppName, !Ref EBEnvironmentType, 'SecurityGroup']]
      GroupDescription: !Sub 'Security Group for elasticbeanstalk ${EBEnvironmentType} environment - ${EBAppName}'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIpv6: ::/0
  
  EBServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [ 'aco', !Ref EBEnvironmentType, 'elasticbeanstalk-service-role' ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticbeanstalk.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': elasticbeanstalk
      Path: /
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy'
        # - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService' #deprecated , replaced by AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy

  EC2ServiceRoleForEB:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [ 'aco', !Ref EBEnvironmentType, 'elasticbeanstalk-ec2-role' ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier'
      Tags:
        - Key: 'ENVIRONMENT'
          Value: !Ref EBEnvironmentType
        - Key: 'APP_NAME'
          Value: !Ref EBAppName

  InstanceProfileForEC2ServiceRole:
          Type: 'AWS::IAM::InstanceProfile'
          Properties:
            InstanceProfileName: !Join ['-', [ 'aco', !Ref EBEnvironmentType, 'instance-profile-elasticbeanstalk-ec2-role' ] ]
            Path: /
            Roles:
              - !Ref EC2ServiceRoleForEB
  
  EBApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties: 
      ApplicationName: !Join [ '-', [!Ref EBAppName, !Ref EBEnvironmentType]]
      Description: !Sub 'This is the ${EBEnvironmentType} application'
      ResourceLifecycleConfig:
        # ServiceRole: !Ref EBServiceRole
        ServiceRole: arn:aws:iam::782522910439:role/aws-elasticbeanstalk-service-role
        VersionLifecycleConfig:
          MaxCountRule:
            DeleteSourceFromS3: true
            Enabled: true
            MaxCount: 100
      
  EBInitialAppVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties: 
        ApplicationName: !Ref EBApplication
        SourceBundle:
          S3Bucket: !Ref EBAppSourceS3BucketName
          S3Key: !Join [ '.', [!Ref EBAppSourceS3KeyName, 'zip'] ]
          
  EBEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties: 
        ApplicationName: !Ref EBApplication
        Description: !Sub 'AWS Elastic Beanstalk Environment for ${EBEnvironmentType}'
        EnvironmentName: !Join [ '-', [!Ref EBAppName, env, !Ref EBEnvironmentType]]
        SolutionStackName: "64bit Amazon Linux 2 v3.4.2 running Docker"
        # SolutionStackName: "64bit Amazon Linux 2018.03 v2.22.0 running Multi-container Docker 19.03.6-ce (Generic)"
        VersionLabel: !Ref EBInitialAppVersion
        OptionSettings:
          - Namespace: 'aws:elasticbeanstalk:environment'
            OptionName: EnvironmentType
            Value: SingleInstance
          - Namespace: 'aws:elasticbeanstalk:environment'
            OptionName: ServiceRole
            Value: !Ref EBServiceRole

          # not using this one. I am using xray as a docker container in docker-compose instead of installing the agent in the ec2 instance
          # this makes easier the communication between containers        
          # - Namespace: 'aws:elasticbeanstalk:xray'
          #   OptionName: XRayEnabled
          #   Value: true

          - Namespace: 'aws:ec2:instances'
            OptionName: InstanceTypes
            Value: t2.micro
          - Namespace: 'aws:ec2:instances'
            OptionName: EnableSpot
            Value: !Ref EBEnableEC2SpotInstances
          - Namespace: 'aws:ec2:instances'
            OptionName: SpotFleetOnDemandBase
            Value: !If [useSpotEC2Instances, 0, 1]
            
          - Namespace: 'aws:autoscaling:launchconfiguration'
            OptionName: EC2KeyName
            Value: !Ref EBKeyPair
          - Namespace: 'aws:autoscaling:launchconfiguration'
            OptionName: IamInstanceProfile
            Value: !Ref InstanceProfileForEC2ServiceRole
          - Namespace: 'aws:autoscaling:launchconfiguration'
            OptionName: SecurityGroups
            Value: !Ref HTTPSSecurityGroup
          
          - Namespace: 'aws:elasticbeanstalk:sns:topics'
            OptionName: Notification Endpoint
            Value: !Ref EBSnsTopicEmail
          
          - Namespace: 'aws:elasticbeanstalk:healthreporting:system'
            OptionName: SystemType
            Value: enhanced

          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: CURRENCYLAYER_KEY
            Value: !Ref CurrencyLayerKey
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAPS_API_KEY
            Value: !Ref MapsApiKey
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: SESSION_DURATION_SECONDS
            Value: 86400
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: SESSION_KEY
            Value: !Ref SessionKey
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: SESSION_SECRET
            Value: !Ref SessionSecret
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PUSHER_SECRET
            Value: !Ref PusherSecret
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PUSHER_APP_ID
            Value: !Ref PusherAppId
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PUSHER_CLUSTER
            Value: ap4
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PUSHER_KEY
            Value: !Ref PusherKey
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PORT
            Value: 7777
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAX_DB_BKP_KEPT
            Value: !Ref MaxDbBkpKept
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAIL_TRAP_PASS
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, !Ref MailTrapPass]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAIL_TRAP_USER
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, !Ref MailTrapUser]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAIL_TRAP_PORT
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, 2525]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAIL_TRAP_HOST
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, 'smtp.mailtrap.io']
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: DATABASE
            Value: !Ref Database
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            # this one is for the nodejs backend app
            OptionName: NODE_ENV
            Value: !Ref EBEnvironmentType
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            # This setting will be used to execute some commands defined in ebextensions files in initial sample app
            # For production we want to pass an empty value
            OptionName: ENVIRONMENT_TYPE
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, !Ref EBEnvironmentType]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            # This setting will be used to execute some commands defined in ebextensions files in initial sample app
            OptionName: DEPLOY_HTTPS_CERTS_FROM_BKP
            Value: !Ref DeployHttpsCertsFromBkp
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: SENDGRID_API_KEY
            Value: !If [IsProdEnvironment, !Ref SendgridApiKey, !Ref AWS::NoValue]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            # XRAY var. Set to LOG_ERROR to avoid throwing exceptions when your instrumented code attempts to record data when no segment is open
            OptionName: AWS_XRAY_CONTEXT_MISSING
            Value: LOG_ERROR
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            # NodeJS logger
            OptionName: LOGGER_ENABLED
            Value: !Ref EnableNodeJsLogger
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            # NodeJS log file size
            OptionName: LOG_SIZE
            Value: !Ref NodeJSLogSize

  CodePipelineStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: EBEnvironment
    Properties:
      TemplateURL: https://atomicoconut.s3-ap-southeast-2.amazonaws.com/infrastructure/nested-stacks/codepipeline-cicd-aco.yml
      Parameters:
        AppName: !Ref EBAppName
        EnvironmentType: !Ref EBEnvironmentType
        RepoBranch: !Ref RepoBranch
        RepoName: "maxipaolucci/atomiCoconut"

  R53toEbDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      # this is my hostedzonde_id for atomicoconut.com
      HostedZoneId: Z3L4DEQAOGGGEK
      Name: 
        !If 
        - IsProdEnvironment 
        - atomicoconut.com
        - !Join
          - '.' 
          - [!Join [ '', [!Ref EBEnvironmentType, ss]], atomicoconut.com]
      Type: A
      TTL: 3600
      ResourceRecords:
        - !GetAtt EBEnvironment.EndpointURL
  
  # the log group to create in cloudwatch to see the containers logs of the app
  ec2ContainersLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 14
      LogGroupName: !Sub 'aco-${EBEnvironmentType}-containers-logs'
  
  # this sns topic is for the cloudwatch alarm on container errors to send notifications
  containersErrorsSnsTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription: 
        - Endpoint: !Ref EBSnsTopicEmail
          Protocol: email
      TopicName: !Join [ '-', [!Ref EBAppName, !Ref EBEnvironmentType, errors, cloudwatch, alarm]]
  
  # this is a metric filter created for the server container logs in cloudwatch
  serverErrorsMetric: 
    Type: AWS::Logs::MetricFilter
    Properties: 
      LogGroupName: !Ref ec2ContainersLogGroup
      FilterPattern: 'errorHandlers'
      MetricTransformations: 
        - MetricValue: '1'
          MetricNamespace: !Join [ '-', [!Ref EBAppName, !Ref EBEnvironmentType]]
          MetricName: 'ServerErrors'
  
  # this setups and alarm for the metrics generated with server container errors
  serverErrorsMetricAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub 'This is an alarm for the server errors metric in ${EBEnvironmentType} envirnment'
      AlarmName: !Join [ '-', [!Ref EBAppName, !Ref EBEnvironmentType, 'server', 'errors']]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      # Datapoints to alarm expressed as M out of N. where M is DatapointsToAlarm and N is EvaluationPeriods
      DatapointsToAlarm: 1
      EvaluationPeriods: 1
      MetricName: ServerErrors
      Namespace: !Join [ '-', [!Ref EBAppName, !Ref EBEnvironmentType]]
      TreatMissingData: notBreaching
      Period: 300 # 5 min
      Statistic: Sum
      Threshold: 6
      AlarmActions:
        - !Ref containersErrorsSnsTopic
