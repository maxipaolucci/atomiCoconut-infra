Parameters:
  EBAppName:
    Description: ElasticBeanstalk application name
    Type: String
    Default: atomiCoconut
  EBEnvironmentType:
    Type: String
    Description: ElasticBeanstalk environment type
    Default: testing
    AllowedValues:
      - testing
      - production
  EBAppSourceS3BucketName:
    Type: String
    Description: Bucket with initial app-sources to deploy in the EB environment
    Default: atomicoconut
  EBAppSourceS3KeyName:
    Type: String
    Description: Key in S3 Bucket with initial app-sources to deploy in the EB environment
    Default: infrastructure/ecs-sample
  EBSnsTopicEmail:
    Type: String
    Description: Email where to receive notifications regarding ElasticBeanstalk environment
    Default: maxipaolucci@gmail.com
  EBKeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Keypair for elasticbeanstalk environment to connect to EC2 instances
    Default: atomiCoconut_keypair
  CurrencyLayerKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/currencylayer/key
    Description: Access key for currencylayer.com to access the API
  PusherSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    # NoEcho: true
    Default: /maxipaolucci/aco/test/pusher/secret
    Description: Secret value for Pusher Channels API 
  PusherKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    # NoEcho: true
    Default: /maxipaolucci/aco/test/pusher/key
    Description: Key value for Pusher Channels API 
  PusherAppId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    # NoEcho: true
    Default: /maxipaolucci/aco/test/pusher/appid
    Description: AppID value for Pusher Channels API 
  SessionKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /aco/nodesession/key
    Description: Session key for aCo Node app
  SessionSecret:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /aco/nodesession/secret
    Description: Session secret for aCo Node app
  MailTrapPass:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/aco/mailtrap/pass
    Description: Mailtrap.io password for aCo app
  MailTrapUser:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/aco/mailtrap/user
    Description: Mailtrap.io user for aCo app
  Database:
    Type: 'AWS::SSM::Parameter::Value<String>'
    # NoEcho: true
    Default: /maxipaolucci/aco/test/atlasdb/connectionstring
    Description: Connection string for aco atlas mongodb
  SendgridApiKey:
    Type: 'AWS::SSM::Parameter::Value<String>'
    NoEcho: true
    Default: /maxipaolucci/aco/sendgrid/apikey
    Description: Sendgrid API Key for atomiCoconut

Conditions: 
  IsProdEnvironment: !Equals [ !Ref EBEnvironmentType, production ]

Resources:

  HTTPSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [!Ref EBAppName, !Ref EBEnvironmentType, 'SecurityGroup']]
      GroupDescription: !Sub 'Security Group for elasticbeanstalk ${EBEnvironmentType} environment - ${EBAppName}'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIpv6: ::/0
  
  EBServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [ 'aco', !Ref EBEnvironmentType, 'elasticbeanstalk-service-role' ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - elasticbeanstalk.amazonaws.com
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': elasticbeanstalk
      Path: /
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth'
        - 'arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService'

  EC2ServiceRoleForEB:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [ 'aco', !Ref EBEnvironmentType, 'elasticbeanstalk-ec2-role' ] ]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker'
        - 'arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier'
      Tags:
        - Key: 'CLOUDWATCH_AGENT_ADMIN'
          Value: 'Admin stuff to work with the unified cloudwatch agent'
        - Key: 'BEANSTALK_WEBTIER'
          Value: 'Beanstalk web tier permissions'
        - Key: 'BEANSTALK_MULTI_DOCKER'
          Value: 'Beanstalk multi docker permissions'
        - Key: 'S3_FULL_ACCESS'
          Value: 'S3 Full access role'

  InstanceProfileForEC2ServiceRole:
          Type: 'AWS::IAM::InstanceProfile'
          Properties:
            InstanceProfileName: !Join ['-', [ 'aco', !Ref EBEnvironmentType, 'instance-profile-elasticbeanstalk-ec2-role' ] ]
            Path: /
            Roles:
              - !Ref EC2ServiceRoleForEB
  
  EBApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties: 
      ApplicationName: !Join [ '-', [!Ref EBAppName, !Ref EBEnvironmentType]]
      Description: !Sub 'This is the ${EBEnvironmentType} application'
      
  EBInitialAppVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties: 
        ApplicationName: !Ref EBApplication
        SourceBundle:
          S3Bucket: !Ref EBAppSourceS3BucketName
          S3Key: !Join [ '.', [!Ref EBAppSourceS3KeyName, 'zip'] ]
          
  EBEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties: 
        ApplicationName: !Ref EBApplication
        Description: !Sub 'AWS Elastic Beanstalk Environment for ${EBEnvironmentType}'
        EnvironmentName: !Join [ '-', [!Ref EBAppName, env, !Ref EBEnvironmentType]]
        SolutionStackName: "64bit Amazon Linux 2018.03 v2.22.0 running Multi-container Docker 19.03.6-ce (Generic)"
        VersionLabel: !Ref EBInitialAppVersion
        OptionSettings:
          - Namespace: 'aws:elasticbeanstalk:environment'
            OptionName: EnvironmentType
            Value: SingleInstance
          - Namespace: 'aws:elasticbeanstalk:environment'
            OptionName: ServiceRole
            Value: !Ref EBServiceRole

          - Namespace: 'aws:ec2:instances'
            OptionName: InstanceTypes
            Value: t2.micro
            
          - Namespace: 'aws:autoscaling:launchconfiguration'
            OptionName: EC2KeyName
            Value: !Ref EBKeyPair
          - Namespace: 'aws:autoscaling:launchconfiguration'
            OptionName: IamInstanceProfile
            Value: !Ref InstanceProfileForEC2ServiceRole
          - Namespace: 'aws:autoscaling:launchconfiguration'
            OptionName: SecurityGroups
            Value: !Ref HTTPSSecurityGroup
          
          - Namespace: 'aws:elasticbeanstalk:sns:topics'
            OptionName: Notification Endpoint
            Value: !Ref EBSnsTopicEmail
          
          - Namespace: 'aws:elasticbeanstalk:healthreporting:system'
            OptionName: SystemType
            Value: enhanced

          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: CURRENCYLAYER_KEY
            Value: !Ref CurrencyLayerKey
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: SESSION_DURATION_SECONDS
            Value: 86400
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: SESSION_KEY
            Value: !Ref SessionKey
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: SESSION_SECRET
            Value: !Ref SessionSecret
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PUSHER_SECRET
            Value: !Ref PusherSecret
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PUSHER_APP_ID
            Value: !Ref PusherAppId
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PUSHER_CLUSTER
            Value: ap4
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PUSHER_KEY
            Value: !Ref PusherKey
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: PORT
            Value: 7777
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAIL_TRAP_PASS
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, !Ref MailTrapPass]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAIL_TRAP_USER
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, !Ref MailTrapUser]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAIL_TRAP_PORT
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, 2525]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: MAIL_TRAP_HOST
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, 'smtp.mailtrap.io']
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: DATABASE
            Value: !Ref Database
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            # this one is for the nodejs backend app
            OptionName: NODE_ENV
            Value: !If [IsProdEnvironment, 'production', 'development']
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            # This setting will be used to execute some commands defined in ebextensions files in initial sample app
            # For production we want to pass an empty value
            OptionName: ENVIRONMENT_TYPE
            Value: !If [IsProdEnvironment, !Ref AWS::NoValue, !Ref EBEnvironmentType]
          - Namespace: 'aws:elasticbeanstalk:application:environment'
            OptionName: SENDGRID_API_KEY
            Value: !If [IsProdEnvironment, !Ref SendgridApiKey, !Ref AWS::NoValue]

  R53toEbDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      # this is my hostedzonde_id for atomicoconut.com
      HostedZoneId: Z3L4DEQAOGGGEK
      Name: 
        !If 
        - IsProdEnvironment 
        - atomicoconut.com
        - !Join
          - '.' 
          - [!Join [ '', [!Ref EBEnvironmentType, ss]], atomicoconut.com]
      Type: A
      TTL: 3600
      ResourceRecords:
        - !GetAtt EBEnvironment.EndpointURL
  
  ec2ServerContainerLogGroup: 
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 14
      LogGroupName: !Sub 'aco-${EBEnvironmentType}-server-container-logs'
  